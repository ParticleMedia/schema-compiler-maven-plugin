package com.pmi.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import lombok.Getter;
import lombok.Setter;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * This is a auto generated class. You can see more details from here:
 * https://github.com/ParticleMedia/schema-compiler-maven-plugin
 *
{{#doc}}
 * {{doc}}
{{/doc}}
 */
@Getter
@Setter
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class {{name}} {
  {{#fields}}
  {{#doc}}
  // {{doc}}
  {{/doc}}
  {{#alias}}
  @JsonProperty("{{alias}}")
  {{/alias}}
  {{#meta.serializeEnumAsInt}}
  @JsonSerialize(using = IntegerEnumSerializer.class)
  {{/meta.serializeEnumAsInt}}
  {{#meta.serializeIgnore}}
  @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
  {{/meta.serializeIgnore}}
  private {{{type}}} {{name}};

  {{/fields}}
  public {{name}} clone() {
    {{name}} newObj = new {{name}}();

    {{#fields}}
    {{#isList}}
    if (this.{{name}} != null) {
      {{#useClone}}
      {{{type}}} newList =
        this.{{name}}.stream().map(element -> element.clone()).collect(Collectors.toList());
      {{/useClone}}
      {{^useClone}}
      {{{type}}} newList =
        this.{{name}}.stream().map(element -> element).collect(Collectors.toList());
      {{/useClone}}
      
      newObj.{{setterName}}(newList);
    } else {
      newObj.{{setterName}}(null);
    }
    {{/isList}}
    {{^isList}}
    {{#useClone}}
    if (this.{{name}} != null) {
      newObj.{{setterName}}(this.{{clonerName}}());
    }
    {{/useClone}}
    {{^useClone}}
    newObj.{{setterName}}(this.{{clonerName}}());
    {{/useClone}}
    {{/isList}}
    {{/fields}}

    return newObj;
  }
}
